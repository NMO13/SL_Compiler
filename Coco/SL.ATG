using SL_Compiler.SymbolList;
using System.Collections;
using SL_Compiler.Codegen;
using System.Collections.Generic;
COMPILER SL
public Tab tab;
Code code;
public byte[] ByteCode { get { return code.ByteCode; } }
readonly int MAX_VARS = 127;

bool IsBuiltIn(Operand x)
{
	if(x.obj == Tab.CHRObj || x.obj == Tab.ORDObj)
		return true;
	return false;
}
/*--------------------------------------------------------------------------*/
CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  digit = "0123456789".
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.
  quote = '\"'.
  anyButQuote = ANY - quote.

TOKENS
  ident  = letter {letter | digit}.
  number = digit {digit}.
  charCon = quote anyButQuote quote.

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab



PRODUCTIONS
/*------------------------------------------------------------------------*/
SL
= 
	"PROGRAM" 					(. tab.OpenScope(); int progStart = 0; code.PutJMP(ref progStart);.)
	{Declaration} 
	"BEGIN" 					(. code.Fixup(progStart);
	                            .)
	StatSeq<null> 					
	"END" "."   (. tab.CloseScope(); code.RET(); .)
.
/*------------------------------------------------------------------------*/
Declaration 
= 
	(VarDecl | ProcDecl)
.
/*------------------------------------------------------------------------*/
VarDecl 				(. List<string> l = new List<string>();.)
= 
	"VAR" 
	{					(. l.Clear(); .)
	IdList<l> 				
	":" 				(. Struct type; .)
	Type<out type> 		(. foreach(string var in l) 
							{
							tab.Insert(var, Obj.Kind.Var, type);
							} 
						.) 
	";"}
.
/*------------------------------------------------------------------------*/
IdList<.List<string> list.>
= 
	ident	(. list.Add(t.val); .)
	{
	  ","  
	  ident (. list.Add(t.val); .)
	}		(. if(list.Count > MAX_VARS)
				SemErr("Too many vars"); .)
.
/*------------------------------------------------------------------------*/
Type<out Struct type> 		
= ident						(. Obj obj = tab.Find(t.val);
							   if(obj.kind != Obj.Kind.Type)
									SemErr("Type expected");
								type = obj.type;		.)
.
/*------------------------------------------------------------------------*/
ProcDecl 			(. Struct type = Tab.noType;.)
= "PROCEDURE" 				
   ident 				(. string ident = t.val; Obj method = tab.Insert(ident, Obj.Kind.Meth, type); 
							tab.OpenScope();.)
   [Parameters<out type>] 
   ";"				(. 	tab.SetReturnType(ident, type);
					.)
   {VarDecl} 	(. method.adr = code.pc; 
                   method.nPars = tab.curScope.ParSize;
				   method.locals = tab.curScope.locals;.)	
   ["BEGIN" (. code.ENTER(tab.curScope.VarSizeInBytes); .)
   StatSeq<method> 
   ] "END" (. if(method.type == Tab.noType)
								{
								code.LEAVE();
								code.RET(method.nPars*4);
								}
								else
								code.TRAP();
								.)
   
   
   ident (. string endIdent = t.val; 
			if(!endIdent.Equals(ident))
				SemErr("Proc idents do not match");
			.) 
   ";"  (. tab.CloseScope(); 
			Reg.FreeAllRegs();
			.)
.							
/*------------------------------------------------------------------------*/
Parameters<out Struct type> (. type = Tab.noType;.)
= "(" [Param      
		{";" Param
		} 
		] ")" 
		[ ":" Type<out type>]
.
/*------------------------------------------------------------------------*/
Param (. List<string> l = new List<string>(); Struct type;.)
= 
["VAR"] IdList<l> ":" Type<out type> (. foreach(string var in l) 
										{
											tab.Insert(var, Obj.Kind.Par, type);
										} 
								   .)
.
/*------------------------------------------------------------------------*/
StatSeq<Obj method>
= Statement<method> {";" Statement<method>}
.
/*------------------------------------------------------------------------*/
Statement<Obj method> (. Reg.FreeAllRegs(); 
                         Operand x = null, y; .)
=
[ ident (. Obj o = tab.Find(t.val);
			x = code.VarOperand(o);
		.)
	( 
		":=" Expression<out y> (. 	if (!x.AssignableTo(y, this))
										return;
									code.Load(y);
									code.PutMOV(x, y);
									Reg.FreeAllRegs();
								.)
	| 		IF(IsBuiltIn(x))					
			"(" Expression<out x> ")"
	
			|						(.	if(x.obj == Tab.CHRObj || x.obj == Tab.ORDObj)
									return;
									if(x.reg != Reg.none) //save EDI if predefined procedure gets called
									{
										Operand ediOp = new Operand();
										ediOp.reg = Reg.EDI;
										code.PUSH(ediOp);
									}
								.)
		  ActParameters<x> 						
		                       (.
							    code.CALL(x);
								if(x.reg != Reg.none) //restore EDI if predefined procedure gets called
								{
									Operand ediOp = new Operand();
									ediOp.reg = Reg.EDI;
									code.POP(ediOp);
								}
								Reg.FreeAllRegs();
							    .)
	
	)
| "IF" (. Code.CompOp op = Code.CompOp.eq; int else_ = 0, end = 0;.)
Condition<out op> (. code.PutJcc((int)op, Code.fjmp, Code.signed, ref else_); .)
"THEN" StatSeq<method>
{"ELSIF"  (. code.PutJMP(ref end); code.Fixup(else_); else_ = 0; .)
Condition<out op> (. code.PutJcc((int)op, Code.fjmp, Code.signed, ref else_); .)
"THEN" StatSeq<method>
} 
[
"ELSE" (. code.PutJMP(ref end); code.Fixup(else_); .) 
StatSeq<method> 
| (. code.Fixup(else_); .)
] 
"END" (. code.Fixup(end); .)
| 
   "WHILE" (. Code.CompOp op = Code.CompOp.eq; int start = code.pc; int end = 0; .)
   Condition<out op> (. code.PutJcc((int)op, Code.fjmp, Code.signed, ref end); .)
   "DO" 
   StatSeq<method>
   "END" (. code.PutJMP(ref start); 
            code.Fixup(end); .)
| 
"RETURN" (. bool expressionFound = false; .)
[
Expression<out x>		(. if(method.type == Tab.noType)
							SemErr("void method must not return a value");
						if(method.type != x.type)
							SemErr("return type must match method type");
						expressionFound = true;
						code.Load(x);
						Operand eaxOpd = code.RegOpd(0); //load return value into eax
						code.PutMOV(eaxOpd, x);
						code.LEAVE();
                        code.RET(method.nPars*4);
					  .)
 ] 
					  (. if(method.type != Tab.noType && !expressionFound) //a return val is required but not found 
							SemErr("Return expression required");
						.)
]
.
/*------------------------------------------------------------------------*/
Condition<out Code.CompOp op> (. Operand x; Operand y; op = Code.CompOp.eq;.)
= Expression<out x> 
Relop<out op> 
Expression<out y> (. code.Load(x);
					 code.Load(y);
					 code.GenOp(Dyadic.Ops.Compare, x, y);
				  .)
.
/*------------------------------------------------------------------------*/
Expression<out Operand x>   (. Operand y; Dyadic.Ops op; bool neg = false;.)
= [Addop<out neg>] 
   Term<out x>		(. 	if(neg)
						{
							if(x.type == Tab.intType)
							{
							  if(x.kind == Operand.Kind.Con) 
								x.val = -x.val;
							  else
							  {
							    code.Load(x);
								code.PutNEG(x);
							  }
							}
							else
							  SemErr("an error");
						}
					.)
   {
      Addop<out neg> (. if(neg)
							op = Dyadic.Ops.Minus;
						else
							op = Dyadic.Ops.Plus;
					 .)
	  Term<out y>  (. if (x.type == Tab.intType && y.type == Tab.intType) 
							code.GenOp(op, x, y);
					  else 
						SemErr("an error");
						.)
   }
.
/*------------------------------------------------------------------------*/
Term<out Operand x>    (. Operand y; Dyadic.Ops op;.)
= Factor<out x>
  {
    (	
	"*"  (. op = Dyadic.Ops.Mult; .)
	| 
	"/"  (. op = Dyadic.Ops.Div;  .)
	| 
	"%"  (. op = Dyadic.Ops.Mod;  .)
	)
	Factor<out y>  (. if(x.type == Tab.intType && y.type == Tab.intType)
						code.GenOp(op, x, y);
						else
						SemErr("error");
					.)
  }
.
/*------------------------------------------------------------------------*/
Factor<out Operand x> (.x = new Operand(); Operand ap = new Operand();.)
= ident (.  Obj o = tab.Find(t.val);
            x = code.VarOperand(o);
			if(x.type.kind == Struct.Kind.None)
				SemErr("Invalid call of void method");
		.)
   [IF(IsBuiltIn(x))
	"(" 
		
		Expression<out ap> (. if(x.obj == Tab.CHRObj && ap.type != Tab.intType)
									SemErr("Parameter type for CHR is not correct");
							  if(x.obj == Tab.ORDObj && ap.type != Tab.charType)
									SemErr("Parameter type for CHR is not correct");
							  if(x.obj == Tab.CHRObj)
								ap.type = Tab.charType;
							  else if(x.obj == Tab.ORDObj)
							    ap.type = Tab.intType;
							  else
								SemErr("error");
							  x = ap;
							.)
	")"
	|
	ActParameters<x> (.code.CALL(x); .)
   ] 
	| 
	number		(. x = code.ConOpd(Convert.ToInt32(t.val)); .) 
	| 
	charCon     (. char s = t.val[1]; x = code.ConOpd(s); x.type = Tab.charType;.)
	| 
	"(" Expression<out x> ")"
.
/*------------------------------------------------------------------------*/
ActParameters<Operand x> (. Operand ap = new Operand(); .)
= "(" (. if(x.kind != Operand.Kind.Meth)
			SemErr("called object is not a method");
		 List<Obj> fp = x.locals;
		 int aPars = 0;
		 .)
[Expression<out ap>  (.
						if(aPars + 1 > x.nPars)
						{
							SemErr("Number of actual and formal parameters does not match");
							return;
						}
						if(ap.type != fp[aPars++].type)
							SemErr("parameter type mismatch");
						code.Load(ap); code.PUSH(ap); 
						Reg.FreeReg(ap.reg);.)
  {"," Expression<out ap> (.
							if(aPars + 1> x.nPars)
							{
								SemErr("Number of actual and formal parameters does not match");
								return;
							}
							if(ap.type != fp[aPars++].type)
							 SemErr("parameter type mismatch"); 
 
							code.Load(ap); code.PUSH(ap); 
							Reg.FreeReg(ap.reg);.)
  } 
] 
            (. if(aPars != x.nPars)
				SemErr("Number of actual and formal parameters does not match");
				.)
")"
.
/*------------------------------------------------------------------------*/
Relop<out Code.CompOp op> (. op = Code.CompOp.eq; .)
=   "=" (. op = Code.CompOp.eq; .)
	| 
	"#" (. op = Code.CompOp.neq; .)
	| 
	"<" (. op = Code.CompOp.lt; .)
	| 
	">" (. op = Code.CompOp.gt; .)
	| 
	">=" (. op = Code.CompOp.geq; .)
	| 
	"<=" (. op = Code.CompOp.leq; .)
.
/*------------------------------------------------------------------------*/
Addop<out bool neg> (. neg = false; .)
= 
     "+" (. neg = false; .)
   | "-" (. neg = true; .)
.
/*------------------------------------------------------------------------*/
END SL.
